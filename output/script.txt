제가 다룰 내용은 InnoDB입니다어렵고 광범위한 부분이다 보니모든 부분을 훑어 보지는 못하고최대한 핵심적인 부분만 간단히 다룰 예정입니다
그래서 부제목은 InnoDB 가볍게 훑기입니다선행지식 없이도 모두가 가볍게 받아들일 수 있는 것을 희망하지만아쉽게도 이 정도 선행지식이 조금이라도
뒷받침되어야 수월하게 들으실 수 있을 거예요자, 시작해볼까요? InnoDB란 무엇일까요?지난 수요일 인덱스와 트랜젝션 강의에서본 것 같기도 하고 어렴풋하시죠?
InnoDB는 MySQL이 5.5 버전부터 기본적으로 사용하는스토리지 엔진입니다그 말은 그 이전까지는 기본이 아니었다는 거겠죠?맞습니다그 이전까지는 MyISAM이라는
스토리지 엔진이MySQL의 기본 스토리지 엔진이었습니다그럼 왜 MyISAM에서 InnoDB로 전환하게 된 걸까요?InnoDB의 특징과 함께 알아보겠습니다MyISAM의 특징을 곁들여서요
첫 번째 특징은 외래키를 지원한다는 것입니다혹시 개발을 하면서 이런 에러로그를 만난 적,혹은 이와 같은 옵션을 설정하신 적이 있으신가요?모두 외래 키 지원 기능에 속하는 것인데요
너무나 당연하게 누리고 있는 기능이지만이 외래 키 지원 기능 또한 InnoDB에서 제공하는 기능입니다이를 통해 데이터베이스 레벨에서참조 무결성을 자동으로 보장합니다
그렇다면 MyISAM은 외래 키를 지원하지 않나요?네 맞습니다 따라서 데이터의 참조 무결성을 보장하기 위해애플리케이션 레벨에서 데이터의 무결성을 유지하는 코드를직접 수동으로 작성해야 하는 것입니다
두 번째 특징은 레코드 수준의 잠금을 지원한다는 것입니다참고로 DB에서 low와 record는 동의어로 사용됩니다InnoDB의 레코드 수준의 잠금을 알아보기 전에
먼저 MyISAM의 테이블 수준 잠금에 대해 알아볼 필요가 있습니다MyISAM은 테이블 수준의 잠금을 사용합니다테이블 수준으로 잠근다는 것은데이터 쓰기 작업을 할 때해당
레코드가 속한테이블 전체가 잠긴다는 것을 의미합니다예시를 들어볼까요?이러한 크루 테이블이 있다고 가정해볼게요사용자 A가 크루 테이블에서특정 크루의 정보를 업데이트하려고
시도하면이 시점에서 크루 테이블 전체가 잠기고요청된 값으로 갱신됩니다그리고 아직 사용자에 의해트랜잭션이 끝나지 않은 상태이죠이때 사용자 B가 동일한
크루의 정보를 업데이트하려고 시도합니다하지만 여전히 테이블이 잠겨있는 상태라서사용자 B는 잠금이 해제될 때까지 대기하게 됩니다이 방법은 문제가 되지 않을 수도 있어요
데이터 변경이 거의 없이주로 읽기 작업만 하는 환경또는 다중 사용자가 많지 않는 환경이라면 말이죠그러나 그 반대의 경우라면동시성 문제와 병목 현상이 발생할 가능성이 높겠죠
테이블 잠금이 풀릴 때까지 기다려야 하니까요InnoDB에서는 레코드 수준의 잠금을 지원하여이 문제를 개선합니다쓰기 작업이 발생할 때그 레코드 하나만 잠그기 때문에
동시에 여러 트랜잭션이테이블에 여러 레코드를 수정할 수 있습니다그러면 보다 높은 동시성이 보장되어병목 현상이 발생할 가능성도 줄어들겠죠따라서
이는 사용자가 많은 환경에서 유리하다고 볼 수 있습니다여기서 유의할 점이 있는데요InnoDB의 레코드 수준 잠금은사실 레코드 자체를 잠그는 것이
아니라인덱스의 레코드를 잠근다는 것입니다즉 변경할 레코드를 찾기 위해검색한 인덱스에 레코드들이 모두 잠긴다는 것입니다마찬가지로 예시를 들어볼게요레코드가
총 100개인 크루테이블에분야와 아이디로 인덱스가 걸려있습니다이때 이와 같은 업데이트문을 실행한다고 해볼게요그러면 검색에 사용된백엔드 인덱스의
레코드 5개가 남기게 됩니다그런데 여기서 한 가지 경우를 더 살펴보자면만약에 인덱스를 설정하지 않는다면 어떻게 될까요?이때는 기본으로 생성된 PK 인덱스를
사용하여테이블 풀 스캔을 하게 되므로검색에 사용된 모든 PK 인덱스가 잠깁니다즉 100개의 레코드가 모두 잠기게 되는 것입니다이렇게 인덱스를 어떻게 설정하는지에
따라레코드 잠금 범위가 달라질 수 있습니다그러니 InnoDB를 사용할 때는인덱스 설계를 정말 잘 설계하는 것이 좋겠죠세 번째 특징은 트랜지션을 지원한다는 것입니다
MyISAM은 트랜지션을 지원하지 않습니다트랜잭션은 작업의 완전성을 보장하기 위한 개념인데요이를 지원하지 않는다는 것은작업의 일부만 적용될 수 있다는 말이겠죠
이는 곧 데이터의 정합성이 깨진다는 것을 의미합니다데이터 정합성이 별로 중요하지 않은비즈니스 로직이 단순한 서비스라면어쩌면 이 트랜잭션 지원이 불필요할 수도 있겠네요
그러나 이러한 서비스라면 어떨까요?데이터 정합성이 보장되지 않는다면누가 봐도 큰일이 일어날 것 같지 않나요?MyISAM에서 InnoDB로 전환된주된 이유 중 하나가 바로 여기에 있습니다
InnoDB는 트랜잭션을 지원합니다게다가 ACID를 보장합니다이제 InnoDB가 ACID를 보장하기 위해사용하는 메커니즘을 간단히 살펴볼 건데InnoDB 초심자를 대상으로 하는 만큼각 메커니즘에 대해 상세하게 다루지 않을 거예요그래서 생소한 용어가 많이나와도 이해가 완벽하게 되지 않아도아 이런 게 있어서 이 특성이 보장되는구나정도로 받아들여 주시면 좋을 것 같아요먼저 원자성을 보장하기 위해서는Undo log와 Redo log가 사용됩니다
두 로그 모두 MySQL 서버가 비정상 종료되는 경우장애를 복구하기 위해 사용되는 로그입니다
Undo log에는 트랜잭션이 변경하기 이전의 값이 기록되어롤백 시 이 값을 이용하여 복구할 수 있게 됩니다
그리고 Redo 로그에는 트랜잭션이 커밋되기 전에트랜잭션에서 변경된 모든 사항이 기록되어트랜잭션을 실패해도 이 Redo로그를 통해이전 값을 복구하는 방식으로 원자성이 보장합니다
Redo 로그는 지속성을 보장하는 데에도 사용됩니다Redo로그는 디스크에 위치하여 있어영구적으로 기록되는데요
덕분에 MySQL 서버 장애 발생 시에도Redo 로그에 기록된 데이터를 이용해마지막 커밋 상태를 복구할 수 있게 됩니다
일관성을 보장하기 위해서는외래키 제약, 유니크 제약 조건 등데이터 무결성 제약 조건을 지원합니다외래키 제약과 관련해서는 앞에서
다뤘으니가볍게 넘어갈게요마지막으로 격리성을 보장하기 위해많은 메커니즘이 사용되는데요네 가지 트렌젝션 격리 수준과행 수준 잠금, MVCC가 사용되고 있습니다
이 중 트랜젝션의 격리 수준에 대해서는지난 수요일 수업뿐만 아니라저번 주에 6기 백엔드 크루 러쉬가 다뤄주셨죠?넘어가고행 수준 잠금도 앞에서
다뤘으니MVCC에 대해서만 강력하게 살펴보겠습니다MVCC는 Multi-Version Concurrency Control의 약자로하나의 레코드에 대해 여러 개의 버전을 관리한다
그래서 잠금을 걸지 않고도한 트랜잭션 내에서는 항상 같은 결과를 바랄 수 있다결과적으로 데이터베이스의 동시성을 향상시킨다정도로 알고 가시면 될 것 같아요이외에도
다루지 않은 많은 특징들이 존재하는데요InnoDB에 대해 더 깊이 알고 싶으신 분들은앞서 다뤄봤던 세 가지 특징과 함께이 키워드들을 추가적으로 학습해보면 좋을 것 같아요
참고로 MySQL 공식 문서에InnoDB 스토리지 엔진 문서들을 보면이렇게 많은 키워드들이 여러분을 기다리고 있답니다지금까지 InnoDB 특징을 정말 가볍게 훑어보았습니다
개인적으로 뭐든 알고 쓰는 것과모르고 쓰는 것은 천지 차이라고 생각을 하는데요여러분은 오늘 InnoDB에 대해아주 조금이나마 알게 되었으니MySQL을 좀 더 잘 활용할 수 있게 되지 않을까하는
아주 작은 기대를 걸어보겠습니다참고자료는 MySQL 공식 문서와Real MySQL 8.0에 있습니다감사합니다
