name: deploy

on:
  push:
    branches: [ main, develop ]

jobs:
  jar-build:
    if: ${{ !contains(github.event.head_commit.message, '[skip]') }}
    runs-on: ubuntu-latest

    steps:
      - name: source checkout
        uses: actions/checkout@v4

      - name: install java 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: build jar
        run: chmod +x gradlew && ./gradlew clean build --exclude-task test

      - name: pipeline upload jar
        uses: actions/upload-artifact@v4
        with:
          name: app
          path: ./build/libs

      - name: pipeline upload dockerfile
        uses: actions/upload-artifact@v4
        with:
          name: docker
          path: ./Dockerfile

  jar-dockerizing:
    needs: jar-build
    runs-on: ubuntu-latest
    steps:

      - name: pipeline app dir in download jar
        uses: actions/download-artifact@v4
        with:
          name: app
          path: ./app

      - name: pipeline docker dir in download dockerfile
        uses: actions/download-artifact@v4
        with:
          name: docker
          path: ./docker

      - name: move dockerfile
        run: mv docker/Dockerfile .

      - name: echo root dir
        run: ls -al .

      - name: echo app dir
        run: ls -al ./app


      - name: Docker Image Build
        run: docker build -t ${{ secrets.DOCKER_HUB_ID }}/${{ secrets.DOCKER_HUB_REPOSITORY }} .

      - name: Docker Hub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_ID }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Push Docker Image From DockerHub
        run: docker push ${{ secrets.DOCKER_HUB_ID }}/${{ secrets.DOCKER_HUB_REPOSITORY }}

#  jar-deploy:
#    needs: jar-dockerizing
#    runs-on: ubuntu-latest
#    steps:
#      - name: deploy server access with deploy shell run
#        uses: appleboy/ssh-action@v1.0.3
#        with:
#          host: ${{ secrets.SERVER_HOST }}
#          username: ${{ secrets.SERVER_USERNAME }}
#          password: ${{ secrets.SERVER_PASSWORD }}
#          port: ${{ secrets.SERVER_PORT }}
#          script: |
#            docker stop ${{ secrets.DOCKER_HUB_REPOSITORY }}
#            docker rm ${{ secrets.DOCKER_HUB_REPOSITORY }}
#            docker rmi ${{ secrets.DOCKER_HUB_ID }}/${{ secrets.DOCKER_HUB_REPOSITORY }}
#            docker pull ${{ secrets.DOCKER_HUB_ID }}/${{ secrets.DOCKER_HUB_REPOSITORY }}
#            docker run -d -p 8080:8080 -e OPENAI_API_KEY=${OPENAI_API_KEY} --name ${DOCKER_HUB_REPOSITORY} ${DOCKER_HUB_ID}/${DOCKER_HUB_REPOSITORY}
